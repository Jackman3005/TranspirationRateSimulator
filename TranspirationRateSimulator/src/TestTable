import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;


public class TestTable {

    public static void main(String[] args) {
        new TestTable();
    }

    public TestTable() {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    ex.printStackTrace();
                }
                MyTableModel model = new MyTableModel();
                JTable table = new JTable(model);

                JFrame frame = new JFrame("Testing");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.add(new JScrollPane(table));
                frame.pack();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }

        });
    }

    public class MyTableModel extends DefaultTableModel {

        public MyTableModel() {
            super(new Object[][]{
                {"Leaf width (cm)",new Double(66)}, 
                {"Leaf area (cm^2)",new Double(82)}, 
                {"Stoma density (#/mm^2)",new Double(66)}, 
                {"Radius of stoma (um)",new Double(82)}, 
                {"Depth of stoma (um)",new Double(66)}, 
                {"Temperature (C)",new Double(82)}, 
                {"Relative humidity of air (%)",new Double(66)}, 
                {"Windspeed (mph)",new Double(82)}
            }, new String[]{
                "Parameter", "Line1"
            });
        }
        Class[] types = new Class[]{
            String.class, Object.class
        };
        boolean[][] canEdit = new boolean[][]{
            {false, false},
            {false, true},
            {false, true},
            {false, true},
            {false, true},
            {false, true},
            {false, true},
            {false, true},
            {false, true},
        };

        
        public Class getColumnClass(int columnIndex) {
            return types[columnIndex];
        }

      
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit[rowIndex][columnIndex];
        }
    }
}
